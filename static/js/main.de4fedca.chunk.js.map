{"version":3,"sources":["components/countdown_timer.js","App.js","serviceWorker.js","index.js"],"names":["timerDisplay","props","status","countDown","seconds","react_default","a","createElement","className","style","width","REP_DURATION","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","intervalId","rep","set","bind","assertThisInitialized","stopCountDown","onStart","setState","_this2","setInterval","clearInterval","_this$state","console","log","borderRadius","padding","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.de4fedca.chunk.js","sourcesContent":["import React from \"react\";\n// import logo from \"../logo.svg\";\n\nexport default function timerDisplay(props) {\n  const status = props.status;\n  const countDown = props.seconds;\n  const classNameOngoing = \"card bg-dark text-primary border-primary mx-auto\";\n  const classNameResting = \"card bg-dark text-success border-success mx-auto\";\n\n  // let countDown = 7;\n  return (\n    <div>\n      <p className={status === \"resting\" ? \"text-success\" : \"text-primary\"}>\n        {status}\n      </p>\n      {/* <img\n        src={logo}\n        className=\"App-logo\"\n        alt=\"logo\"\n        style={{ cursor: \"pointer\" }}\n        onClick={function clickCountDown() {\n          props.onClick(props.value);\n        }}\n      /> */}\n      <div\n        className={status === \"resting\" ? classNameResting : classNameOngoing}\n        style={{ width: \"80px\" }}\n      >\n        <div className=\"card-body\">\n          <div className=\"card-title\">{countDown}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport TimerDisplay from \"./components/countdown_timer\";\nconst REP_DURATION = 4;\nconst REST_REP_DURATION = 2;\nconst REST_SET_DURATION = 3;\nconst REP_PER_SET = 2;\nconst SET_TOTAL = 2;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: \"Click to start\",\n      seconds: REP_DURATION,\n      intervalId: null,\n      rep: 0,\n      set: 0\n    };\n    this.countDown = this.countDown.bind(this);\n    this.stopCountDown = this.stopCountDown.bind(this);\n    this.onStart = this.onStart.bind(this);\n  }\n\n  onStart() {\n    this.countDown();\n    if (this.state.status === \"Click to start\") {\n      this.setState({ status: \"ongoing\" });\n    }\n  }\n\n  countDown() {\n    const intervalId = setInterval(\n      () => this.setState({ seconds: this.state.seconds - 1 }),\n      1000\n    );\n    this.setState({ intervalId });\n  }\n\n  stopCountDown() {\n    clearInterval(this.state.intervalId);\n    this.setState({ status: \"Click to resume\" });\n  }\n\n  componentDidUpdate() {\n    let { status, seconds, set, rep } = this.state;\n\n    /** check if second===0 */\n    if (seconds === 0) {\n      switch (status) {\n        default:\n          console.log(`default`);\n          break;\n        case \"ongoing\":\n          this.setState({\n            status: \"resting\",\n            seconds: REST_REP_DURATION\n          });\n          break;\n        case \"resting\":\n          rep = rep + 1;\n          // /** check if rep num is full, if so \"rest_bewteen set\", if not then \"ongiong\" */\n          // if (rep === REP_PER_SET) {\n          //   this.setState({\n          //     status: \"resting between set\",\n          //     seconds: REST_SET_DURATION,\n          //     rep: 0,\n          //     set: this.state.set + 1\n          //   });\n          //   console.log(`BREAK! rep:${this.state.rep}, set: ${this.state.set}`);\n          // } else {\n          //   this.setState({ status: \"ongoing\", seconds: REP_DURATION });\n          // }\n          // /** check if set num is full, if so \"Finished\" */\n          // if (this.state.set === SET_TOTAL) {\n          //   this.setState({ status: \"Finised !\" });\n          //   this.stopCountDown();\n          // }\n          if (rep === REP_PER_SET) {\n            /** enough reps for one set */\n            set += 1;\n            rep = 0;\n            if (set === SET_TOTAL) {\n              /** enough set, goes to \"Finished\" */\n              this.setState({ status: \"Finished!\", set, rep });\n              this.stopCountDown();\n            } else {\n              /** not enough set, goes to \"resting between set\" */\n              this.setState({\n                status: \"resting between set\",\n                seconds: REST_SET_DURATION,\n                rep,\n                set\n              });\n            }\n          } else {\n            /** not enough rep for one set, goes to \"ongoing\" */\n            this.setState({\n              status: \"ongoing\",\n              seconds: REP_DURATION,\n              rep,\n              set\n            });\n          }\n          break;\n        case \"resting between set\":\n          this.setState({ status: \"ongoing\", seconds: REP_DURATION });\n          break;\n      }\n    }\n\n    // console.log(\n    //   `status: ${this.state.status}; rep: ${this.state.rep}; set: ${\n    //     this.state.set\n    //   }; seconds: ${this.state.seconds}`\n    // );\n  }\n\n  render() {\n    const className_Start = \"btn btn-primary mt-3\";\n    const className_ongoing = \"btn btn-danger mt-3\";\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <TimerDisplay\n            seconds={this.state.seconds}\n            status={this.state.status}\n          />\n          <button\n            className={\n              this.state.status === \"Click to start\"\n                ? className_Start\n                : className_ongoing\n            }\n            style={{ borderRadius: \"25px\", padding: \"11px 40px\" }}\n            onClick={\n              this.state.status === \"Click to start\"\n                ? this.onStart\n                : this.stopCountDown\n            }\n          >\n            {this.state.status === \"Click to start\" ? \"Start\" : \"Stop\"}\n          </button>\n          <div>\n            rep:\n            <span className=\"label label-primary\">{this.state.rep}</span>\n          </div>\n          <div>set: {this.state.set}</div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}