{"version":3,"sources":["components/countdown_timer.js","App.js","serviceWorker.js","index.js"],"names":["timerDisplay","props","status","countDown","seconds","react_default","a","createElement","className","style","width","REP_DURATION","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","intervalId","rep","set","bind","assertThisInitialized","stopCountDown","onStart","setState","_this2","setInterval","clearInterval","_this$state","console","log","borderRadius","padding","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.11e0aa84.chunk.js","sourcesContent":["import React from \"react\";\r\n// import logo from \"../logo.svg\";\r\n\r\nexport default function timerDisplay(props) {\r\n  const status = props.status;\r\n  const countDown = props.seconds;\r\n  const classNameOngoing = \"card bg-dark text-primary border-primary mx-auto\";\r\n  const classNameResting = \"card bg-dark text-success border-success mx-auto\";\r\n\r\n  // let countDown = 7;\r\n  return (\r\n    <div>\r\n      <p className={status === \"resting\" ? \"text-success\" : \"text-primary\"}>\r\n        {status}\r\n      </p>\r\n      {/* <img\r\n        src={logo}\r\n        className=\"App-logo\"\r\n        alt=\"logo\"\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={function clickCountDown() {\r\n          props.onClick(props.value);\r\n        }}\r\n      /> */}\r\n      <div\r\n        className={status === \"resting\" ? classNameResting : classNameOngoing}\r\n        style={{ width: \"80px\" }}\r\n      >\r\n        <div className=\"card-body\">\r\n          <div className=\"card-title\">{countDown}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\n// import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport TimerDisplay from \"./components/countdown_timer\";\r\nconst REP_DURATION = 4;\r\nconst REST_REP_DURATION = 2;\r\nconst REST_SET_DURATION = 3;\r\nconst REP_PER_SET = 2;\r\nconst SET_TOTAL = 2;\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      status: \"Click to start\",\r\n      seconds: REP_DURATION,\r\n      intervalId: null,\r\n      rep: 0,\r\n      set: 0\r\n    };\r\n    this.countDown = this.countDown.bind(this);\r\n    this.stopCountDown = this.stopCountDown.bind(this);\r\n    this.onStart = this.onStart.bind(this);\r\n  }\r\n\r\n  onStart() {\r\n    this.countDown();\r\n    if (this.state.status === \"Click to start\") {\r\n      this.setState({ status: \"ongoing\" });\r\n    }\r\n  }\r\n\r\n  countDown() {\r\n    const intervalId = setInterval(\r\n      () => this.setState({ seconds: this.state.seconds - 1 }),\r\n      1000\r\n    );\r\n    this.setState({ intervalId });\r\n  }\r\n\r\n  stopCountDown() {\r\n    clearInterval(this.state.intervalId);\r\n    this.setState({ status: \"Click to resume\" });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    let { status, seconds, set, rep } = this.state;\r\n\r\n    /** check if second===0 */\r\n    if (seconds === 0) {\r\n      switch (status) {\r\n        default:\r\n          console.log(`default`);\r\n          break;\r\n        case \"ongoing\":\r\n          this.setState({\r\n            status: \"resting\",\r\n            seconds: REST_REP_DURATION\r\n          });\r\n          break;\r\n        case \"resting\":\r\n          rep = rep + 1;\r\n          // /** check if rep num is full, if so \"rest_bewteen set\", if not then \"ongiong\" */\r\n          // if (rep === REP_PER_SET) {\r\n          //   this.setState({\r\n          //     status: \"resting between set\",\r\n          //     seconds: REST_SET_DURATION,\r\n          //     rep: 0,\r\n          //     set: this.state.set + 1\r\n          //   });\r\n          //   console.log(`BREAK! rep:${this.state.rep}, set: ${this.state.set}`);\r\n          // } else {\r\n          //   this.setState({ status: \"ongoing\", seconds: REP_DURATION });\r\n          // }\r\n          // /** check if set num is full, if so \"Finished\" */\r\n          // if (this.state.set === SET_TOTAL) {\r\n          //   this.setState({ status: \"Finised !\" });\r\n          //   this.stopCountDown();\r\n          // }\r\n          if (rep === REP_PER_SET) {\r\n            /** enough reps for one set */\r\n            set += 1;\r\n            rep = 0;\r\n            if (set === SET_TOTAL) {\r\n              /** enough set, goes to \"Finished\" */\r\n              this.setState({ status: \"Finished!\", set, rep });\r\n              this.stopCountDown();\r\n            } else {\r\n              /** not enough set, goes to \"resting between set\" */\r\n              this.setState({\r\n                status: \"resting between set\",\r\n                seconds: REST_SET_DURATION,\r\n                rep,\r\n                set\r\n              });\r\n            }\r\n          } else {\r\n            /** not enough rep for one set, goes to \"ongoing\" */\r\n            this.setState({\r\n              status: \"ongoing\",\r\n              seconds: REP_DURATION,\r\n              rep,\r\n              set\r\n            });\r\n          }\r\n          break;\r\n        case \"resting between set\":\r\n          this.setState({ status: \"ongoing\", seconds: REP_DURATION });\r\n          break;\r\n      }\r\n    }\r\n\r\n    // console.log(\r\n    //   `status: ${this.state.status}; rep: ${this.state.rep}; set: ${\r\n    //     this.state.set\r\n    //   }; seconds: ${this.state.seconds}`\r\n    // );\r\n  }\r\n\r\n  render() {\r\n    const className_Start = \"btn btn-primary mt-3\";\r\n    const className_ongoing = \"btn btn-danger mt-3\";\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <TimerDisplay\r\n            seconds={this.state.seconds}\r\n            status={this.state.status}\r\n          />\r\n          <button\r\n            className={\r\n              this.state.status === \"Click to start\"\r\n                ? className_Start\r\n                : className_ongoing\r\n            }\r\n            style={{ borderRadius: \"25px\", padding: \"11px 40px\" }}\r\n            onClick={\r\n              this.state.status === \"Click to start\"\r\n                ? this.onStart\r\n                : this.stopCountDown\r\n            }\r\n          >\r\n            {this.state.status === \"Click to start\" ? \"Start\" : \"Stop\"}\r\n          </button>\r\n          <div>\r\n            rep:\r\n            <span className=\"label label-primary\">{this.state.rep}</span>\r\n          </div>\r\n          <div>set: {this.state.set}</div>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}