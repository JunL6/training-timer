{"version":3,"sources":["components/countdown_timer.js","App.js","serviceWorker.js","index.js"],"names":["timerDisplay","props","status","countDown","seconds","react_default","a","createElement","className","style","width","initialState","intervalId","rep","set","isBtnStop","btnClassName","banner","btnLabel","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","stopCountDown","onStart","onStop","renderButton","setState","_this2","setInterval","clearInterval","_this$state","console","log","borderRadius","padding","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8729d85f.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function timerDisplay(props) {\n  const status = props.status;\n  const countDown = props.seconds;\n  const classNameOngoing = \"card bg-dark text-primary border-primary mx-auto\";\n  const classNameResting = \"card bg-dark text-success border-success mx-auto\";\n\n  return (\n    <div>\n      <p className={status === \"resting\" ? \"text-success\" : \"text-primary\"}>\n        {status}\n      </p>\n\n      <div\n        className={status === \"resting\" ? classNameResting : classNameOngoing}\n        style={{ width: \"80px\" }}\n      >\n        <div className=\"card-body\">\n          <div className=\"card-title\">{countDown}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport TimerDisplay from \"./components/countdown_timer\";\nconst REP_DURATION = 4;\nconst REST_REP_DURATION = 2;\nconst REST_SET_DURATION = 3;\nconst REP_PER_SET = 2;\nconst SET_TOTAL = 1;\nconst initialState = {\n  status: \"Click to start\",\n  seconds: REP_DURATION,\n  intervalId: null,\n  rep: 0,\n  set: 0,\n  isBtnStop: false,\n  // btnLabel: \"Start\" /** UIstate, don't put it here */,\n  btnClassName: \"btn btn-primary mt-3\" /** UIstate, don't put it here */\n};\n/** status refactor */\nlet banner = initialState.status;\n/** button label refactor */\nlet btnLabel = \"Start\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n    this.countDown = this.countDown.bind(this);\n    this.stopCountDown = this.stopCountDown.bind(this);\n    this.onStart = this.onStart.bind(this);\n    this.onStop = this.onStop.bind(this);\n    this.renderButton = this.renderButton.bind(this);\n  }\n\n  onStart() {\n    this.countDown();\n    this.setState({\n      status: \"ongoing\",\n      isBtnStop: true,\n      btnClassName: \"btn btn-danger mt-3\"\n    });\n    btnLabel = \"Stop\";\n  }\n\n  onStop() {\n    this.stopCountDown();\n    if (this.state.status === \"Finished!\") {\n      this.setState({\n        status: \"Click to start\",\n        seconds: REP_DURATION,\n        intervalId: null,\n        rep: 0,\n        set: 0,\n        isBtnStop: false,\n        btnClassName: \"btn btn-primary mt-3\"\n      });\n      btnLabel = \"Restart\";\n    } else {\n      this.setState({\n        isBtnStop: false,\n        btnClassName: \"btn btn-primary mt-3 \"\n      });\n      btnLabel = \"Resume\";\n    }\n  }\n\n  countDown() {\n    const intervalId = setInterval(\n      () => this.setState({ seconds: this.state.seconds - 1 }),\n      1000\n    );\n    this.setState({ intervalId });\n  }\n\n  stopCountDown() {\n    clearInterval(this.state.intervalId);\n    // this.setState({ status: \"Click to resume\" });\n  }\n\n  componentDidUpdate() {\n    let { status, seconds, set, rep } = this.state;\n\n    /** check if second===0 */\n    if (seconds === 0) {\n      switch (status) {\n        default:\n          console.log(`default`);\n          break;\n        case \"ongoing\":\n          this.setState({\n            status: \"resting\",\n            seconds: REST_REP_DURATION\n          });\n          break;\n        case \"resting\":\n          rep = rep + 1;\n          if (rep === REP_PER_SET) {\n            /** enough reps for one set */\n            set += 1;\n            rep = 0;\n            if (set === SET_TOTAL) {\n              /** enough set, goes to \"Finished\" */\n              this.setState(\n                {\n                  status: \"Finished!\",\n                  set,\n                  rep,\n                  btnClassName: \"btn btn-primary mt-3\",\n                  isBtnStop: false\n                },\n                this.onStop\n              );\n            } else {\n              /** not enough set, goes to \"resting between set\" */\n              this.setState({\n                status: \"resting between set\",\n                seconds: REST_SET_DURATION,\n                rep,\n                set\n              });\n            }\n          } else {\n            /** not enough rep for one set, goes to \"ongoing\" */\n            this.setState({\n              status: \"ongoing\",\n              seconds: REP_DURATION,\n              rep,\n              set\n            });\n          }\n          break;\n        case \"resting between set\":\n          this.setState({ status: \"ongoing\", seconds: REP_DURATION });\n          break;\n      }\n    }\n  }\n\n  renderButton() {\n    return (\n      <button\n        className={this.state.btnClassName}\n        style={{ borderRadius: \"25px\", padding: \"11px 40px\" }}\n        onClick={this.state.isBtnStop === false ? this.onStart : this.onStop}\n      >\n        {btnLabel}\n      </button>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <TimerDisplay\n            seconds={this.state.seconds}\n            status={this.state.status}\n            banner={banner}\n          />\n          <div>\n            rep:\n            <span className=\"label label-primary\">{this.state.rep}</span>\n          </div>\n          <div>set: {this.state.set}</div>\n          {this.renderButton()}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}